{"version":3,"sources":["components/Search/Search.js","components/Header/Header.js","components/Current/Current.js","components/Forecast/Forecast.js","components/Main/Main.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Search","callBack","useState","currentCity","setCurrentCity","labelState","setLabelState","placeholder","setPlaceholder","handleInputClick","handleButtonClick","trim","className","value","onChange","event","target","onClick","onKeyPress","e","key","Header","Current","weatherInfo","location","date","src","current","weather","icon","alt","main","Math","round","temp","humidity","wind_speed","city","town","state","country","toUpperCase","description","Forecast","max","min","Main","contentState","dates","i","map","dayIndex","index","console","log","daily","App","setCity","undefined","coordinates","setCoordinates","setLocation","setDate","setWeatherInfo","setContentState","loaderVisibility","setLoaderVisibility","loader","setLoader","catchError","error","response","data","status","headers","request","message","useEffect","axios","get","params","process","q","then","results","length","components","setTimeout","geometry","state_code","country_code","catch","lat","lon","lng","exclude","appid","units","d","days","count","getDay","dateBuilder","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAGe,SAASA,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,iBAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAsCJ,mBAAS,sBAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAUA,SAASC,IACY,kCAAfJ,IACFC,EAAc,iBACdE,EAAe,uBAInB,SAASE,IACuB,KAA1BP,EAAYQ,KAAK,MACnBL,EAAc,iCACdE,EAAe,MAEfP,EAASE,GACTG,EAAc,iBACdE,EAAe,uBASnB,OACE,sBAAKI,UAAU,SAAf,UACE,wBAAOA,UAAWP,EAAlB,UACE,uBACEQ,MAAOV,EACPW,SApCR,SAA2BC,GACN,kCAAfV,IACFC,EAAc,iBACdE,EAAe,uBAEjBJ,EAAeW,EAAMC,OAAOH,QAgCtBI,QAASR,EACTS,WAZR,SAAwBC,GACR,UAAVA,EAAEC,IAAiBV,IAClBD,KAWCG,UAAU,gBACVL,YAAaA,IAEC,kCAAfF,GACC,mBAAGO,UAAU,0BAAb,iCAGJ,wBAAQK,QAASP,EAAmBE,UAAU,iBAA9C,uB,MClDS,SAASS,EAAT,GAA+B,IAAbpB,EAAY,EAAZA,SAC/B,OACE,yBAAQW,UAAU,SAAlB,UACE,oBAAIA,UAAU,gBAAd,0BACA,cAACZ,EAAD,CAAQC,SAAUA,O,MCLT,SAASqB,EAAT,GAAmD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KACvD,OACE,sBAAKb,UAAU,UAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBACEA,UAAU,wBACVc,IACE,qCACAH,EAAYI,QAAQC,QAAQ,GAAGC,KAC/B,OAEFC,IAAKP,EAAYI,QAAQC,QAAQ,GAAGG,OAEtC,qBAAInB,UAAU,gBAAd,UACE,qBAAIA,UAAU,oBAAd,UACGoB,KAAKC,MAAMV,EAAYI,QAAQO,MAChC,qBAAKtB,UAAU,2BAAf,sBAEF,6CAAgBW,EAAYI,QAAQQ,SAApC,QACA,+BACG,IADH,SAESH,KAAKC,MAAuC,IAAjCV,EAAYI,QAAQS,YAFxC,QAEgE,aAIpE,sBAAKxB,UAAU,sBAAf,UACE,qBAAIA,UAAU,mBAAd,UACGY,EAASa,MAAQb,EAASc,KAD7B,IACoC,IACjCd,EAASe,OAASf,EAASgB,QAAQC,iBAEtC,oBAAI7B,UAAU,qBAAd,SAAoCa,IACpC,oBAAIb,UAAU,qBAAd,SACGW,EAAYI,QAAQC,QAAQ,GAAGc,oB,MChC3B,SAASC,EAAT,GAA0C,IAAtBpB,EAAqB,EAArBA,YAAaE,EAAQ,EAARA,KAC9C,OACE,sBAAKb,UAAU,WAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiC,CAACa,EAAK,GAAIA,EAAK,GAAIA,EAAK,MACzD,qBACEb,UAAU,yBACVc,IACE,qCACAH,EAAYK,QAAQ,GAAGC,KACvB,OAEFC,IAAKP,EAAYK,QAAQ,GAAGG,OAE9B,sBAAKnB,UAAU,wBAAf,UACE,uBAAMA,UAAU,mBAAhB,UACGoB,KAAKC,MAAMV,EAAYW,KAAKU,KAC7B,qBAAKhC,UAAU,sBAAf,qBAEF,uBAAMA,UAAU,mBAAhB,UACGoB,KAAKC,MAAMV,EAAYW,KAAKW,KAC7B,qBAAKjC,UAAU,sBAAf,2B,MChBK,SAASkC,EAAT,GAEb,IAF2E,IAA9CvB,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,KAAMsB,EAAgB,EAAhBA,aACpDC,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAMC,IAAMxB,EAAK,GAAKwB,EAAI,GAAK,EAGjC,MAAqB,YAAjBF,EAEA,sBAAKnC,UAAU,OAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,cAACU,EAAD,CACEC,YAAaA,EACbC,SAAUA,EACVC,KAAMA,EAAK,GAAGA,EAAK,QAGvB,qBAAKb,UAAU,cAAf,6BACA,qBAAKA,UAAU,iBAAf,SACGoC,EAAME,KAAI,SAACC,EAAUC,GAEpB,OADAC,QAAQC,IAAIF,EAAOD,GAEjB,cAACR,EAAD,CAEEpB,YAAaA,EAAYgC,MAAMH,GAC/B3B,KAAMA,EAAK,GAAG0B,IAFTC,WASO,YAAjBL,EAEL,sBAAKnC,UAAU,qBAAf,UACE,oBAAIA,UAAU,oBAAd,+BACA,mBAAGA,UAAU,8BAAb,uDAGA,mBAAGA,UAAU,8BAAb,+BACA,mBAAGA,UAAU,8BAAb,kCAGoB,UAAjBmC,EAAiC,qBAAKnC,UAAU,cAApD,E,0BCzCQ,SAAS4C,IACtB,MAAwBtD,mBAAS,IAAjC,mBAAOmC,EAAP,KAAaoB,EAAb,KACA,EAAsCvD,wBAASwD,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgC1D,mBAAS,IAAzC,mBAAOsB,EAAP,KAAiBqC,EAAjB,KACA,EAAwB3D,mBAAS,IAAjC,mBAAOuB,EAAP,KAAaqC,EAAb,KACA,EAAsC5D,mBAAS,IAA/C,mBAAOqB,EAAP,KAAoBwC,EAApB,KACA,EAAwC7D,mBAAS,SAAjD,mBAAO6C,EAAP,KAAqBiB,EAArB,KACA,EAAgD9D,oBAAS,GAAzD,mBAAO+D,EAAP,KAAyBC,EAAzB,KACA,EAA4BhE,wBAASwD,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KA6EA,SAASC,EAAWC,GACdA,EAAMC,UAERlB,QAAQC,IAAIgB,EAAMC,SAASC,MAC3BnB,QAAQC,IAAIgB,EAAMC,SAASE,QAC3BpB,QAAQC,IAAIgB,EAAMC,SAASG,UAClBJ,EAAMK,QAEftB,QAAQC,IAAIgB,EAAMK,SAGlBtB,QAAQC,IAAI,QAASgB,EAAMM,SAoB/B,OApGAC,qBAAU,WACK,KAATxC,GAAe4B,IACjBD,EAAgB,SAChBI,EAAU,qBAAKxD,UAAU,aACzBkE,IACGC,IAAI,iDAAkD,CACrDC,OAAQ,CACN5D,IAAK6D,mCACLC,EAAG7C,KAGN8C,MAAK,SAACZ,GAE8B,IAAjCA,EAASC,KAAKY,QAAQC,aACwB3B,IAA7Ca,EAASC,KAAKY,QAAQ,GAAGE,WAAWjD,WACUqB,IAA7Ca,EAASC,KAAKY,QAAQ,GAAGE,WAAWhD,MAEtC8B,EAAU,MACVR,OAAeF,GACfM,EAAgB,WAChBuB,YAAW,WACY,YAAjBxC,GAA+C,UAAjBA,GAChCiB,EAAgB,WACjB,OAEHJ,EAAeW,EAASC,KAAKY,QAAQ,GAAGI,UACxC3B,EAAY,CACVxB,KAAMkC,EAASC,KAAKY,QAAQ,GAAGE,WAAWjD,KAC1CC,KAAMiC,EAASC,KAAKY,QAAQ,GAAGE,WAAWhD,KAC1CC,MAAOgC,EAASC,KAAKY,QAAQ,GAAGE,WAAWG,WAC3CjD,QAAS+B,EAASC,KAAKY,QAAQ,GAAGE,WAAWI,mBAIlDC,OAAM,SAACrB,GACND,EAAWC,GACXF,EAAU,MACVR,OAAeF,GACfM,EAAgB,WAChBuB,YAAW,WACY,YAAjBxC,GAA+C,UAAjBA,GAChCiB,EAAgB,WACjB,QAEPE,GAAoB,MAErB,CAAC7B,EAAM4B,EAAkBE,EAAQpB,IAEpC8B,qBAAU,gBACYnB,IAAhBC,GACFmB,IACGC,IAAI,mDAAoD,CACvDC,OAAQ,CACNY,IAAKjC,EAAYiC,IACjBC,IAAKlC,EAAYmC,IACjBC,QAAS,yBACTC,MAAOf,mCACPgB,MAAO,YAGVd,MAAK,SAACZ,GACLH,EAAU,MACVL,EAAeQ,EAASC,MACxBR,EAAgB,cAEjB2B,OAAM,SAACrB,GAAD,OAAWD,EAAWC,QAEhC,CAACX,IAkCF,qBAAK/C,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAACS,EAAD,CAAQpB,SA7Gd,SAAoBe,GAClByC,EAAQzC,GACR8C,EAwFF,SAAqBoC,GACnB,IAAMC,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGIC,EAAQF,EAAEG,SAAS,EAEzB,MAAO,CAACF,EAAMC,GArGNE,CAAY,IAAIC,OACxBrC,GAAoB,MA2GfC,EACD,cAACrB,EAAD,CACEvB,YAAaA,EACbC,SAAUA,EACVC,KAAMA,EACNsB,aAAcA,SCrIxB,IAYeyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKMO,QACW,cAA7BC,OAAOzF,SAAS0F,UAEe,UAA7BD,OAAOzF,SAAS0F,UAEhBD,OAAOzF,SAAS0F,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAACyC,GACLA,EAAaC,gBAEdlC,OAAM,SAACrB,GACNjB,QAAQiB,MAAMA,EAAMM,YC/G5B4B,M","file":"static/js/main.eeb8535c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./search.css\";\n\nexport default function Search({ callBack }) {\n  const [currentCity, setCurrentCity] = useState(\"\");\n  const [labelState, setLabelState] = useState(\"Search__label\");\n  const [placeholder, setPlaceholder] = useState(\"Enter the location\");\n\n  function handleInputChange(event) {\n    if (labelState === \"Search__label Search__warning\") {\n      setLabelState(\"Search__label\");\n      setPlaceholder(\"Enter the location\");\n    }\n    setCurrentCity(event.target.value);\n  }\n\n  function handleInputClick() {\n    if (labelState === \"Search__label Search__warning\") {\n      setLabelState(\"Search__label\");\n      setPlaceholder(\"Enter the location\");\n    }\n  }\n\n  function handleButtonClick() {\n    if (currentCity.trim(\" \") === \"\") {\n      setLabelState(\"Search__label Search__warning\");\n      setPlaceholder(\"\");\n    } else {\n      callBack(currentCity);\n      setLabelState(\"Search__label\");\n      setPlaceholder(\"Enter the location\");\n    }\n  }\n\n  function handleKeyPress(e) {\n    if (e.key === \"Enter\") handleButtonClick();\n    else handleInputClick();\n  }\n\n  return (\n    <div className=\"Search\">\n      <label className={labelState}>\n        <input\n          value={currentCity}\n          onChange={handleInputChange}\n          onClick={handleInputClick}\n          onKeyPress={handleKeyPress}\n          className=\"Search__input\"\n          placeholder={placeholder}\n        />\n        {labelState === \"Search__label Search__warning\" && (\n          <p className=\"Search__warning-content\"> Field is empty </p>\n        )}\n      </label>\n      <button onClick={handleButtonClick} className=\"Search__button\">\n        Search\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Search from \"../Search/Search\";\nimport \"./header.css\";\n\nexport default function Header({ callBack }) {\n  return (\n    <header className=\"Header\">\n      <h1 className=\"Header__title\"> Weather App</h1>\n      <Search callBack={callBack} />\n    </header>\n  );\n}\n","import React from \"react\";\nimport \"./current.css\";\n\nexport default function Current({ weatherInfo, location, date }) {\n  return (\n    <div className=\"Current\">\n      <div className=\"Current__info\">\n        <img\n          className=\"Current__weather-icon\"\n          src={\n            \"https://openweathermap.org/img/wn/\" +\n            weatherInfo.current.weather[0].icon +\n            \".png\"\n          }\n          alt={weatherInfo.current.weather[0].main}\n        />\n        <ul className=\"Current__list\">\n          <li className=\"list__temperature\">\n            {Math.round(weatherInfo.current.temp)}\n            <sup className=\"list__temperature-symbol\">Â°C</sup>\n          </li>\n          <li> Humidity: {weatherInfo.current.humidity}% </li>\n          <li>\n            {\" \"}\n            Wind: {Math.round(weatherInfo.current.wind_speed * 3.6)} km/h{\" \"}\n          </li>\n        </ul>\n      </div>\n      <div className=\"Current__other-info\">\n        <h2 className=\"other-info__city\">\n          {location.city || location.town},{\" \"}\n          {location.state || location.country.toUpperCase()}\n        </h2>\n        <h3 className=\"other-info__clouds\">{date}</h3>\n        <h3 className=\"other-info__clouds\">\n          {weatherInfo.current.weather[0].description}\n        </h3>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./forecast.css\";\n\nexport default function Forecast({ weatherInfo, date }) {\n  return (\n    <div className=\"Forecast\">\n      <h1 className=\"Forecast__title\">{[date[0], date[1], date[2]]}</h1>\n      <img\n        className=\"Forecast__weather-icon\"\n        src={\n          \"https://openweathermap.org/img/wn/\" +\n          weatherInfo.weather[0].icon +\n          \".png\"\n        }\n        alt={weatherInfo.weather[0].main}\n      />\n      <div className=\"Forecast__temperature\">\n        <span className=\"temperature__max\">\n          {Math.round(weatherInfo.temp.max)}\n          <sup className=\"temperature__symbol\">Â°</sup>\n        </span>\n        <span className=\"temperature__min\">\n          {Math.round(weatherInfo.temp.min)}\n          <sup className=\"temperature__symbol\">Â°</sup>\n        </span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Current from \"../Current/Current\";\nimport Forecast from \"../Forecast/Forecast\";\n\nimport \"./main.css\";\n\nexport default function Main({ weatherInfo, location, date, contentState }) {\n  const dates = [];\n  for (let i = 0; i < 6; i++) {\n    dates[i] = (date[1] + i + 1) % 7;\n  }\n\n  if (contentState === \"weather\")\n    return (\n      <div className=\"Main\">\n        <div className=\"Main__currentWeather\">\n          <Current\n            weatherInfo={weatherInfo}\n            location={location}\n            date={date[0][date[1]]}\n          />\n        </div>\n        <div className=\"Main__Trend\">Next few days..</div>\n        <div className=\"Main__forecast\">\n          {dates.map((dayIndex, index) => {\n            console.log(index, dayIndex);\n            return (\n              <Forecast\n                key={index}\n                weatherInfo={weatherInfo.daily[index]}\n                date={date[0][dayIndex]}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  else if (contentState === \"warning\")\n    return (\n      <div className=\"Main Main--warning\">\n        <h2 className=\"Main__no-location\">No location found</h2>\n        <p className=\"Main__no-location-paragraph\">\n          Try informing city/town and state/country\n        </p>\n        <p className=\"Main__no-location-paragraph\">Ex: Dallas, Texas</p>\n        <p className=\"Main__no-location-paragraph\">Ex: Tokyo, Japan </p>\n      </div>\n    );\n  else if (contentState === \"blank\") return <div className=\"Main\"></div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\n\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  const [city, setCity] = useState(\"\");\n  const [coordinates, setCoordinates] = useState(undefined);\n  const [location, setLocation] = useState({});\n  const [date, setDate] = useState([]);\n  const [weatherInfo, setWeatherInfo] = useState({});\n  const [contentState, setContentState] = useState(\"blank\");\n  const [loaderVisibility, setLoaderVisibility] = useState(false);\n  const [loader, setLoader] = useState(undefined);\n\n  function searchCity(target) {\n    setCity(target);\n    setDate(dateBuilder(new Date()));\n    setLoaderVisibility(true);\n  }\n\n  useEffect(() => {\n    if (city !== \"\" && loaderVisibility) {\n      setContentState(\"blank\");\n      setLoader(<div className=\"loading\"></div>);\n      axios\n        .get(\"https://api.opencagedata.com/geocode/v1/json? \", {\n          params: {\n            key: process.env.REACT_APP_OPEN_CAGE_API_KEY,\n            q: city,\n          },\n        })\n        .then((response) => {\n          if (\n            response.data.results.length === 0 ||\n            (response.data.results[0].components.city === undefined &&\n              response.data.results[0].components.town === undefined)\n          ) {\n            setLoader(null);\n            setCoordinates(undefined);\n            setContentState(\"warning\");\n            setTimeout(() => {\n              if (contentState === \"warning\" || contentState === \"blank\")\n                setContentState(\"blank\");\n            }, 5000);\n          } else {\n            setCoordinates(response.data.results[0].geometry);\n            setLocation({\n              city: response.data.results[0].components.city,\n              town: response.data.results[0].components.town,\n              state: response.data.results[0].components.state_code,\n              country: response.data.results[0].components.country_code,\n            });\n          }\n        })\n        .catch((error) => {\n          catchError(error);\n          setLoader(null);\n          setCoordinates(undefined);\n          setContentState(\"warning\");\n          setTimeout(() => {\n            if (contentState === \"warning\" || contentState === \"blank\")\n              setContentState(\"blank\");\n          }, 5000);\n        });\n      setLoaderVisibility(false);\n    }\n  }, [city, loaderVisibility, loader, contentState]);\n\n  useEffect(() => {\n    if (coordinates !== undefined) {\n      axios\n        .get(\"https://api.openweathermap.org/data/2.5/onecall?\", {\n          params: {\n            lat: coordinates.lat,\n            lon: coordinates.lng,\n            exclude: \"minutely,hourly,alerts\",\n            appid: process.env.REACT_APP_OPEN_WEATHER_API_KEY,\n            units: \"metric\",\n          },\n        })\n        .then((response) => {\n          setLoader(null);\n          setWeatherInfo(response.data);\n          setContentState(\"weather\");\n        })\n        .catch((error) => catchError(error));\n    }\n  }, [coordinates]);\n\n  function catchError(error) {\n    if (error.response) {\n      // Request made and server responded\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log(\"Error\", error.message);\n    }\n  }\n\n  function dateBuilder(d) {\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    const count = d.getDay()%7\n\n    return [days, count]\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__container\">\n        <Header callBack={searchCity} />\n        {loader}\n        <Main\n          weatherInfo={weatherInfo}\n          location={location}\n          date={date}\n          contentState={contentState}\n        />\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// serviceWorker.register();\n"],"sourceRoot":""}